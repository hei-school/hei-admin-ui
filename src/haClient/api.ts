/* tslint:disable */
/* eslint-disable */
/**
 * HEI Admin API
 * _Programmatically connect to a computer programming [school](https://hei.school)._ After [joining us](mailto:contact@hei.school), you can get an identification token from our [dev](https://dev-hei-admin.auth.eu-west-3.amazoncognito.com/oauth2/authorize?client_id=5s8cg50doahmu855rlc8fr6qmp&response_type=token&scope=email+openid&redirect_uri=https%3A%2F%2Fapi-dev.hei.school%2Fwhoami) or [prod](TODO) authentication service. Then, start playing with our system!  The implementation of our API is [publicly disclosed](https://github.com/hei-school/hei-admin-api). You are welcome to try and compromise it. Happy hacking! 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BadRequestException
 */
export interface BadRequestException {
    /**
     * 
     * @type {string}
     * @memberof BadRequestException
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof BadRequestException
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface Course
 */
export interface Course {
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'ref'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof Course
     */
    'credits'?: number;
    /**
     * 
     * @type {number}
     * @memberof Course
     */
    'total_hours'?: number;
}
/**
 * 
 * @export
 * @interface Exception
 */
export interface Exception {
    /**
     * 
     * @type {string}
     * @memberof Exception
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Exception
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'ref'?: string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'creation_datetime'?: string;
}
/**
 * 
 * @export
 * @interface InternalServerException
 */
export interface InternalServerException {
    /**
     * 
     * @type {string}
     * @memberof InternalServerException
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof InternalServerException
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface Manager
 */
export interface Manager {
    /**
     * 
     * @type {string}
     * @memberof Manager
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Manager
     */
    'ref'?: string;
    /**
     * 
     * @type {string}
     * @memberof Manager
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Manager
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Manager
     */
    'sex'?: ManagerSexEnum;
    /**
     * 
     * @type {string}
     * @memberof Manager
     */
    'birth_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof Manager
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof Manager
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof Manager
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Manager
     */
    'entrance_datetime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Manager
     */
    'status'?: ManagerStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ManagerSexEnum {
    M = 'M',
    F = 'F'
}
/**
    * @export
    * @enum {string}
    */
export enum ManagerStatusEnum {
    Enabled = 'ENABLED',
    Disabled = 'DISABLED'
}

/**
 * 
 * @export
 * @interface NotAuthorizedException
 */
export interface NotAuthorizedException {
    /**
     * 
     * @type {string}
     * @memberof NotAuthorizedException
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotAuthorizedException
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ResourceNotFoundException
 */
export interface ResourceNotFoundException {
    /**
     * 
     * @type {string}
     * @memberof ResourceNotFoundException
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceNotFoundException
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface Response
 */
export interface Response {
    /**
     * 
     * @type {number}
     * @memberof Response
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface Student
 */
export interface Student {
    /**
     * 
     * @type {string}
     * @memberof Student
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Student
     */
    'ref'?: string;
    /**
     * 
     * @type {string}
     * @memberof Student
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Student
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Student
     */
    'sex'?: StudentSexEnum;
    /**
     * 
     * @type {string}
     * @memberof Student
     */
    'birth_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof Student
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof Student
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof Student
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Student
     */
    'entrance_datetime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Student
     */
    'status'?: StudentStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum StudentSexEnum {
    M = 'M',
    F = 'F'
}
/**
    * @export
    * @enum {string}
    */
export enum StudentStatusEnum {
    Enabled = 'ENABLED',
    Disabled = 'DISABLED'
}

/**
 * 
 * @export
 * @interface Teacher
 */
export interface Teacher {
    /**
     * 
     * @type {string}
     * @memberof Teacher
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Teacher
     */
    'ref'?: string;
    /**
     * 
     * @type {string}
     * @memberof Teacher
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Teacher
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Teacher
     */
    'sex'?: TeacherSexEnum;
    /**
     * 
     * @type {string}
     * @memberof Teacher
     */
    'birth_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof Teacher
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof Teacher
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof Teacher
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Teacher
     */
    'entrance_datetime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Teacher
     */
    'status'?: TeacherStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum TeacherSexEnum {
    M = 'M',
    F = 'F'
}
/**
    * @export
    * @enum {string}
    */
export enum TeacherStatusEnum {
    Enabled = 'ENABLED',
    Disabled = 'DISABLED'
}

/**
 * 
 * @export
 * @interface TooManyRequestsException
 */
export interface TooManyRequestsException {
    /**
     * 
     * @type {string}
     * @memberof TooManyRequestsException
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof TooManyRequestsException
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'ref'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'sex'?: UserSexEnum;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'birth_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'entrance_datetime'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'status'?: UserStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum UserSexEnum {
    M = 'M',
    F = 'F'
}
/**
    * @export
    * @enum {string}
    */
export enum UserStatusEnum {
    Enabled = 'ENABLED',
    Disabled = 'DISABLED'
}

/**
 * 
 * @export
 * @interface Whoami
 */
export interface Whoami {
    /**
     * 
     * @type {string}
     * @memberof Whoami
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Whoami
     */
    'role'?: WhoamiRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof Whoami
     */
    'bearer'?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum WhoamiRoleEnum {
    Student = 'STUDENT',
    Teacher = 'TEACHER',
    Manager = 'MANAGER'
}


/**
 * SecurityApi - axios parameter creator
 * @export
 */
export const SecurityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary pong
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Who am I? Tells you who you are.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        whoami: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/whoami`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecurityApi - functional programming interface
 * @export
 */
export const SecurityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SecurityApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary pong
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ping(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ping(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Who am I? Tells you who you are.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async whoami(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Whoami>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.whoami(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SecurityApi - factory interface
 * @export
 */
export const SecurityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SecurityApiFp(configuration)
    return {
        /**
         * 
         * @summary pong
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping(options?: any): AxiosPromise<string> {
            return localVarFp.ping(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Who am I? Tells you who you are.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        whoami(options?: any): AxiosPromise<Whoami> {
            return localVarFp.whoami(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SecurityApi - object-oriented interface
 * @export
 * @class SecurityApi
 * @extends {BaseAPI}
 */
export class SecurityApi extends BaseAPI {
    /**
     * 
     * @summary pong
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    public ping(options?: AxiosRequestConfig) {
        return SecurityApiFp(this.configuration).ping(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Who am I? Tells you who you are.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    public whoami(options?: AxiosRequestConfig) {
        return SecurityApiFp(this.configuration).whoami(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TeachingApi - axios parameter creator
 * @export
 */
export const TeachingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Update courses when id are provided, create them otherwise.
         * @summary Create new courses or update existing courses
         * @param {Course} course 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrUpdateCourses: async (course: Course, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'course' is not null or undefined
            assertParamExists('createOrUpdateCourses', 'course', course)
            const localVarPath = `/courses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(course, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update groups when `id` are provided, create them otherwise.
         * @summary Create new groups or update existing groups
         * @param {Array<Group>} group Groups to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrUpdateGroups: async (group: Array<Group>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            assertParamExists('createOrUpdateGroups', 'group', group)
            const localVarPath = `/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(group, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get course by identifier
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourseById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCourseById', 'id', id)
            const localVarPath = `/courses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourses: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/courses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get group by identifier
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getGroupById', 'id', id)
            const localVarPath = `/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroups: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeachingApi - functional programming interface
 * @export
 */
export const TeachingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeachingApiAxiosParamCreator(configuration)
    return {
        /**
         * Update courses when id are provided, create them otherwise.
         * @summary Create new courses or update existing courses
         * @param {Course} course 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrUpdateCourses(course: Course, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Course>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrUpdateCourses(course, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update groups when `id` are provided, create them otherwise.
         * @summary Create new groups or update existing groups
         * @param {Array<Group>} group Groups to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrUpdateGroups(group: Array<Group>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Group>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrUpdateGroups(group, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get course by identifier
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourseById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Course>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourseById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourses(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Course>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourses(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get group by identifier
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroups(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Group>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroups(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeachingApi - factory interface
 * @export
 */
export const TeachingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeachingApiFp(configuration)
    return {
        /**
         * Update courses when id are provided, create them otherwise.
         * @summary Create new courses or update existing courses
         * @param {Course} course 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrUpdateCourses(course: Course, options?: any): AxiosPromise<Course> {
            return localVarFp.createOrUpdateCourses(course, options).then((request) => request(axios, basePath));
        },
        /**
         * Update groups when `id` are provided, create them otherwise.
         * @summary Create new groups or update existing groups
         * @param {Array<Group>} group Groups to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrUpdateGroups(group: Array<Group>, options?: any): AxiosPromise<Array<Group>> {
            return localVarFp.createOrUpdateGroups(group, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get course by identifier
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourseById(id: string, options?: any): AxiosPromise<Course> {
            return localVarFp.getCourseById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourses(options?: any): AxiosPromise<Array<Course>> {
            return localVarFp.getCourses(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get group by identifier
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupById(id: string, options?: any): AxiosPromise<Group> {
            return localVarFp.getGroupById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroups(options?: any): AxiosPromise<Array<Group>> {
            return localVarFp.getGroups(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeachingApi - object-oriented interface
 * @export
 * @class TeachingApi
 * @extends {BaseAPI}
 */
export class TeachingApi extends BaseAPI {
    /**
     * Update courses when id are provided, create them otherwise.
     * @summary Create new courses or update existing courses
     * @param {Course} course 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingApi
     */
    public createOrUpdateCourses(course: Course, options?: AxiosRequestConfig) {
        return TeachingApiFp(this.configuration).createOrUpdateCourses(course, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update groups when `id` are provided, create them otherwise.
     * @summary Create new groups or update existing groups
     * @param {Array<Group>} group Groups to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingApi
     */
    public createOrUpdateGroups(group: Array<Group>, options?: AxiosRequestConfig) {
        return TeachingApiFp(this.configuration).createOrUpdateGroups(group, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get course by identifier
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingApi
     */
    public getCourseById(id: string, options?: AxiosRequestConfig) {
        return TeachingApiFp(this.configuration).getCourseById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all courses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingApi
     */
    public getCourses(options?: AxiosRequestConfig) {
        return TeachingApiFp(this.configuration).getCourses(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get group by identifier
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingApi
     */
    public getGroupById(id: string, options?: AxiosRequestConfig) {
        return TeachingApiFp(this.configuration).getGroupById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingApi
     */
    public getGroups(options?: AxiosRequestConfig) {
        return TeachingApiFp(this.configuration).getGroups(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Update students when `id` are provided, create them otherwise.
         * @summary Create new students or update existing students
         * @param {Array<Student>} student 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrUpdateStudents: async (student: Array<Student>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'student' is not null or undefined
            assertParamExists('createOrUpdateStudents', 'student', student)
            const localVarPath = `/students`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(student, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update teachers when `id` are provided, create them otherwise.
         * @summary Create new teachers or update existing teachers
         * @param {Array<Teacher>} teacher 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrUpdateTeachers: async (teacher: Array<Teacher>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacher' is not null or undefined
            assertParamExists('createOrUpdateTeachers', 'teacher', teacher)
            const localVarPath = `/teachers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teacher, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get manager by identifier
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManagerById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getManagerById', 'id', id)
            const localVarPath = `/managers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all managers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManagers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/managers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get student by identifier
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getStudentById', 'id', id)
            const localVarPath = `/students/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all students
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudents: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/students`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get teacher by identifier
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeacherById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTeacherById', 'id', id)
            const localVarPath = `/teachers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all teachers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/teachers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Update students when `id` are provided, create them otherwise.
         * @summary Create new students or update existing students
         * @param {Array<Student>} student 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrUpdateStudents(student: Array<Student>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Student>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrUpdateStudents(student, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update teachers when `id` are provided, create them otherwise.
         * @summary Create new teachers or update existing teachers
         * @param {Array<Teacher>} teacher 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrUpdateTeachers(teacher: Array<Teacher>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Teacher>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrUpdateTeachers(teacher, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get manager by identifier
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getManagerById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Manager>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getManagerById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all managers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getManagers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Manager>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getManagers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get student by identifier
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudentById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Student>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStudentById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all students
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudents(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Student>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStudents(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get teacher by identifier
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeacherById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Teacher>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeacherById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all teachers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeachers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Teacher>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeachers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Update students when `id` are provided, create them otherwise.
         * @summary Create new students or update existing students
         * @param {Array<Student>} student 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrUpdateStudents(student: Array<Student>, options?: any): AxiosPromise<Array<Student>> {
            return localVarFp.createOrUpdateStudents(student, options).then((request) => request(axios, basePath));
        },
        /**
         * Update teachers when `id` are provided, create them otherwise.
         * @summary Create new teachers or update existing teachers
         * @param {Array<Teacher>} teacher 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrUpdateTeachers(teacher: Array<Teacher>, options?: any): AxiosPromise<Array<Teacher>> {
            return localVarFp.createOrUpdateTeachers(teacher, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get manager by identifier
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManagerById(id: string, options?: any): AxiosPromise<Manager> {
            return localVarFp.getManagerById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all managers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManagers(options?: any): AxiosPromise<Array<Manager>> {
            return localVarFp.getManagers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get student by identifier
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentById(id: string, options?: any): AxiosPromise<Student> {
            return localVarFp.getStudentById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all students
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudents(options?: any): AxiosPromise<Array<Student>> {
            return localVarFp.getStudents(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get teacher by identifier
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeacherById(id: string, options?: any): AxiosPromise<Teacher> {
            return localVarFp.getTeacherById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all teachers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachers(options?: any): AxiosPromise<Array<Teacher>> {
            return localVarFp.getTeachers(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Update students when `id` are provided, create them otherwise.
     * @summary Create new students or update existing students
     * @param {Array<Student>} student 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createOrUpdateStudents(student: Array<Student>, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).createOrUpdateStudents(student, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update teachers when `id` are provided, create them otherwise.
     * @summary Create new teachers or update existing teachers
     * @param {Array<Teacher>} teacher 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createOrUpdateTeachers(teacher: Array<Teacher>, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).createOrUpdateTeachers(teacher, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get manager by identifier
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getManagerById(id: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getManagerById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all managers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getManagers(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getManagers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get student by identifier
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getStudentById(id: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getStudentById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all students
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getStudents(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getStudents(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get teacher by identifier
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getTeacherById(id: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getTeacherById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all teachers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getTeachers(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getTeachers(options).then((request) => request(this.axios, this.basePath));
    }
}


